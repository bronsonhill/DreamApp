import openai
import tools
import json
from datetime import datetime


# open functions.json and save the functions
with open("Python/data/functions.json", "r") as fp:
    functions = json.load(fp)


# open messages.txt and save the messages
with open("Python/data/messages.json", "r") as fp:
    messages = json.load(fp)


request_log = []
dream_object = {}
openai.api_key = tools.key

class Dream:
    """
    A class to represent a dream, a piece of fiction generated by GPT
    """

    def __init__(self) -> None:
        """
        initializes the dream
        """
        self.cost = 0
        with open("Python/data/dreams.json", "r") as fp:
            dreams = json.load(fp)
        
        # self.seed = self.generate_seed()
        # self.log_seed()
        self.seed = dreams[2]["seed"]
        # self.seedling = self.grow_seed(seed=self.seed)
        self.seedling = dreams[2]["seedling"]
        self.chapter_outlines = dreams[2]["chapter_outlines"]
        # self.chapter_outlines = self.plan_chapters()
        # self.chapters = self.write_chapters()
            

        pass


    def generate_seed(self, recurse=False, seed_messages=[]) -> str:
        """
        generates a seed of a narrative with the inspiration of user 
        input if provided. Also recurses if user is unhappy with result
        """
        description = "generate_seed"
        if not recurse:
            # prompts the user for the seed of the story
            user_message = input(
                "Welcome to Dream.\nLet's write a story together! "
                "Here are some questions that you might like to think "
                "about in forming your vision of the story to be.\n"
                "What makes a good story? Is there a problem that you'd "
                "like to explore?\nWhat genre do you like? Are there any "
                "stories that particularly resonate with you? Do you have "
                "any ideas when and where the story might be set?\n"
                )

            # gets response from chatcompletion
            seed_messages = messages["generate_seed"]
            tools.append_message(messages=seed_messages, content=user_message, 
                           role=tools.USER_ROLE)
            
            (seed, temp) = tools.chat_completion(messages=seed_messages,
                                                      description=description)
            self.cost += temp


        # makes edits to the seed until user is happy
        else:
            (seed, temp) = tools.chat_completion(messages=seed_messages, description=description+"_edit")
            self.cost += temp

        user_message = input("Are you happy with this seed? (y/n)\n")

        # when user is happy with the seed
        if user_message == "y":
            print("Great! Let's plant this seed.")

            return seed
        
        # when user wants to make edits to the seed
        elif user_message == "n":
            user_message = input("What would you like to change?\n")
            user_message = "Generate a new seed taking this into consideration: " + user_message
            tools.append_message(messages=seed_messages, content=user_message, 
                           role=tools.USER_ROLE)
            
            return self.generate_seed(recurse=True, seed_messages=seed_messages)
        
        # when user does not enter y or n
        else:
            print("Please enter y or n.")
            return self.generate_seed(recurse=True, seed_messages=seed_messages)
    

    def log_seed(self):
        """
        saves seed to dreams.json
        """
        seed = self.seed
        
        with open ("Python/data/dreams.json", "r") as fp:
            dreams = json.load(fp)
            
        dreams.append({"seed": seed})

        with open ("Python/data/dreams.json", "w") as fp:
            json.dump(dreams, fp, indent=4)
        
        return


    def grow_seed(self, seed):
        """
        creates title and further articulates each point of the seed
        """
        description = "grow_seed"
        seedling = {}
        seedling_messages = messages["base"]
        tools.append_message(messages=seedling_messages, content=seed, role=tools.AI_ROLE)

        # gets response from chatcompletion with each point of the seed
        for key in messages["grow_seed"].keys():
            seedling_messages.append(messages["grow_seed"][key])

            (completion, temp) = tools.chat_completion(messages=seedling_messages, description=description)
            self.cost += temp
            seedling[key] = completion
            seedling_messages.pop()


        user_input = input("What would you like to call the novel?\n")
        seedling["Title"] = user_input
        self.title = user_input

        # saves seedling to a file
        with open("Python/data/dreams.json", "r") as fp:
            dreams = json.load(fp)

        dreams[-1]["seedling"] = seedling

        with open("Python/data/dreams.json", "w") as fp:
            json.dump(dreams, fp, indent=4)


        return
    

    def outline_chapters(self):
        """
        creates chapter outlines using the seedling and then creates chapter objects
        """
        description = "chapter_outlines"
        chapter_outlines = []

        # create prompt
        chapter_outlines_messages = messages["base"]
        temp = messages["plan_chapters"][0]["content"] + tools.dict_to_str(self.seedling)
        append_message(chapter_outlines_messages, temp, tools.USER_ROLE)
    

        (completion, temp) = tools.chat_completion(
            messages=chapter_outlines_messages, 
            description=description,
            model=tools.MODEL_3_16K
            )
        self.cost += temp

        # convert into json format
        chapter_outlines_messages = []
        append_message(chapter_outlines_messages, completion, tools.USER_ROLE)

    
        (completion, temp) = tools.chat_completion(
            messages=chapter_outlines_messages,
            function=functions["plan_chapters"], 
            description=description
            )
        
        self.cost += temp

        chapter_outlines = dict(zip(completion["titles"], completion["summaries"]))

        # saves chapters to file
        with open("Python/data/dreams.json", "r") as fp:
            dreams = json.load(fp)

        dreams[-1]["chapter_outlines"] = chapter_outlines

        with open("Python/data/dreams.json", "w") as fp:
            json.dump(dreams, fp, indent=4)


        return chapter_outlines
    

    def write_chapters(self):
        """
        creates chapter objects from outlines
        """
        chapters = []

        i = 0
        for title, summary in self.chapter_outlines:
            chapters.append(Chapter(self, title, summary))
            i += 1

        return chapters






class Chapter:
    def __init__(self, dream: Dream, title: str, summary: str) -> None:
        """
        initializes the chapter
        """
        self.dream = dream
        self.title = title
        self.summary = summary
        self.plan = self.plan_chapter()


        pass
    

    def plan_chapter(self):
        """
        creates chapter plan
        """
        description = "plan_chapter"
        plan_chapter_messages = messages["base"]
        temp = messages["plan_chapter"]
        temp = temp[0]["content"] + f"\nHere is the chapter outline:\n{self.title}. {self.summary}\n" \
            f"\nHere are the story details for your reference:\n{tools.dict_to_str(self.dream.seedling)}"
        tools.append_message(plan_chapter_messages, temp, tools.USER_ROLE)
        print(plan_chapter_messages)

        (completion, temp) = tools.chat_completion(
            messages=plan_chapter_messages,
            description=description,
            model=tools.MODEL_3_16K
            )
        
        self.dream.cost += temp

        return completion

        



class Passage:
    def __init__(self, description, previous_passage, summary) -> None:
        """
        initializes the passage
        """
        pass




def append_message(messages: list, content: str, role: str):
    """
    appends message to messages list
    :param messages: messages list of openai format
    :param message: a message of string format
    :param role: ie. assistant or user
    """

    messages.append(
        {
        "role": role,
        "content": content
        }
    )

    return




def log_requests(requests: list):
    """
    logs requests and prints details
    """

    print("Total requests: ", len(requests))
    print("Total cost: $", sum([request["cost"] for request in requests]))
    print("Total completion tokens: ", sum([request["completion_tokens"] 
                                            for request in requests]))
    print("Total prompt tokens: ", sum([request["prompt_tokens"] 
                                        for request in requests]))
    

    with open("Python/data/request_log.json", "r") as fp:
        requests = json.load(fp)
        
    requests += request_log

    json.dump(requests, open("Python/data/request_log.json", "w"), indent=4)


    return





def log_data(data, filename: str):
    """
    logs data
    """
    dir = "Python/data/"+filename
    with open(dir, "r") as fp:
        load = json.load(fp)

    load.append(data)

    with open(dir, "w") as fp:
        json.dump(load, fp, indent=4)

    return


try:
    myDream = Dream()
    Chapter(myDream, "Chapter 1: The Orphan's Discovery", "Elara, a curious and resourceful orphan, uncovers a mysterious artifact that awakens her forgotten past and sets her on a journey of self-discovery.")
    tools.log_requests()
    
except Exception as e:
    print(f"\n\nError message: {e}\n\n")
    tools.log_requests()